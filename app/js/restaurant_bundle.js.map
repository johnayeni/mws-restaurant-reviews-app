{"version":3,"sources":["app.js","dbhelper.js","restaurant_info.js"],"names":["navigator","window","addEventListener","_asyncToGenerator2","default","_regenerator","mark","_callee","registration","wrap","_context","prev","next","serviceWorker","register","sent","console","log","scope","t0","stop","this","_idb","_interopRequireDefault","require","DBHelper","callback","fetch","DATABASE_URL","response","status","json","restaurants","id","concat","restaurant","_context2","cuisine","fetchRestaurants","error","results","filter","r","cuisine_type","neighborhood","neighborhoods","map","v","i","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","photograph","google","maps","Marker","position","latlng","title","name","url","urlForRestaurant","animation","Animation","DROP","_dbhelper","initMap","fetchRestaurantFromURL","data","Map","document","getElementById","zoom","center","scrollwheel","fillBreadcrumb","mapMarkerForRestaurant","getParameterByName","fetchRestaurantById","fillRestaurantHTML","arguments","length","undefined","innerHTML","address","image","className","src","imageUrlForRestaurant","alt","operating_hours","fillRestaurantHoursHTML","fillReviewsHTML","operatingHours","hours","key","row","createElement","day","appendChild","time","reviews","container","noReviews","ul","forEach","review","createReviewHTML","li","tabIndex","date","rating","comments","breadcrumb","location","href","replace","RegExp","exec","decodeURIComponent"],"mappings":"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","file":"restaurant_bundle.js","sourcesContent":["if ('serviceWorker' in navigator) {\n  window.addEventListener('load', async () => {\n    try {\n      const registration = await navigator.serviceWorker.register('sw.js');\n      console.log('ServiceWorker registration successful with scope: ', registration.scope);\n    } catch (error) {\n      console.log('ServiceWorker registration failed: ', error);\n    }\n  });\n}\n","import idb from 'idb';\r\n/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelper {\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 1337; // Change this to your server port\r\n    return `http://localhost:${port}/restaurants`;\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  static async fetchRestaurants(callback) {\r\n    try {\r\n      const response = await fetch(DBHelper.DATABASE_URL);\r\n      if (response.status === 200) {\r\n        // Got a success response from server!\r\n        const restaurants = await response.json();\r\n        callback(null, restaurants);\r\n      } else {\r\n        callback('Could not fetch restaurants', null);\r\n      }\r\n    } catch (error) {\r\n      callback(error, null);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static async fetchRestaurantById(id, callback) {\r\n    try {\r\n      const response = await fetch(`${DBHelper.DATABASE_URL}/${id}`);\r\n      if (response.status === 200) {\r\n        // Got a success response from server!\r\n        const restaurant = await response.json();\r\n        callback(null, restaurant);\r\n      } else {\r\n        callback('Restaurant does not exist', null);\r\n      }\r\n    } catch (error) {\r\n      callback(error, null);\r\n    }\r\n  }\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter((r) => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter((r) => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants;\r\n        if (cuisine != 'all') {\r\n          // filter by cuisine\r\n          results = results.filter((r) => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') {\r\n          // filter by neighborhood\r\n          results = results.filter((r) => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood);\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i);\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type);\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i);\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return `./restaurant.html?id=${restaurant.id}`;\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n    return `/img/${restaurant.photograph}.jpg`;\r\n  }\r\n\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n  static mapMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP,\r\n    });\r\n    return marker;\r\n  }\r\n}\r\n\r\nexport default DBHelper;\r\n","import DBHelper from './dbhelper';\n\nlet restaurant;\nlet map;\n/**\n * Initialize Google map, called from HTML.\n */\nwindow.initMap = () => {\n  fetchRestaurantFromURL((error, data) => {\n    if (error) {\n      // Got an error!\n      console.error(error);\n    } else {\n      map = new google.maps.Map(document.getElementById('map'), {\n        zoom: 16,\n        center: data.latlng,\n        scrollwheel: false,\n      });\n      fillBreadcrumb();\n      DBHelper.mapMarkerForRestaurant(restaurant, map);\n    }\n  });\n};\n\n/**\n * Get current restaurant from page URL.\n */\nconst fetchRestaurantFromURL = (callback) => {\n  if (restaurant) {\n    // restaurant already fetched!\n    callback(null, restaurant);\n    return;\n  }\n  const id = getParameterByName('id');\n  if (!id) {\n    // no id found in URL\n    const error = 'No restaurant id in URL';\n    callback(error, null);\n  } else {\n    DBHelper.fetchRestaurantById(id, (error, data) => {\n      restaurant = data;\n      if (!data) {\n        console.error(error);\n        return;\n      }\n      fillRestaurantHTML();\n      callback(null, data);\n    });\n  }\n};\n\n/**\n * Create restaurant HTML and add it to the webpage\n */\nconst fillRestaurantHTML = (data = restaurant) => {\n  const name = document.getElementById('restaurant-name');\n  name.innerHTML = data.name;\n\n  const address = document.getElementById('restaurant-address');\n  address.innerHTML = data.address;\n\n  const image = document.getElementById('restaurant-img');\n  image.className = 'restaurant-img';\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\n  image.alt = data.name + \" restaurant's photo.\";\n\n  const cuisine = document.getElementById('restaurant-cuisine');\n  cuisine.innerHTML = data.cuisine_type;\n\n  // fill operating hours\n  if (restaurant.operating_hours) {\n    fillRestaurantHoursHTML();\n  }\n  // fill reviews\n  fillReviewsHTML();\n};\n\n/**\n * Create restaurant operating hours HTML table and add it to the webpage.\n */\nconst fillRestaurantHoursHTML = (operatingHours = restaurant.operating_hours) => {\n  const hours = document.getElementById('restaurant-hours');\n  for (let key in operatingHours) {\n    const row = document.createElement('tr');\n\n    const day = document.createElement('td');\n    day.innerHTML = key;\n    row.appendChild(day);\n\n    const time = document.createElement('td');\n    time.innerHTML = operatingHours[key];\n    row.appendChild(time);\n\n    hours.appendChild(row);\n  }\n};\n\n/**\n * Create all reviews HTML and add them to the webpage.\n */\nconst fillReviewsHTML = (reviews = restaurant.reviews) => {\n  const container = document.getElementById('reviews-container');\n  const title = document.createElement('h3');\n  title.innerHTML = 'Reviews';\n  container.appendChild(title);\n\n  if (!reviews) {\n    const noReviews = document.createElement('p');\n    noReviews.innerHTML = 'No reviews yet!';\n    container.appendChild(noReviews);\n    return;\n  }\n  const ul = document.getElementById('reviews-list');\n  reviews.forEach((review) => {\n    ul.appendChild(createReviewHTML(review));\n  });\n  container.appendChild(ul);\n};\n\n/**\n * Create review HTML and add it to the webpage.\n */\nconst createReviewHTML = (review) => {\n  const li = document.createElement('li');\n  li.tabIndex = 0;\n  const name = document.createElement('h4');\n  name.innerHTML = review.name;\n  li.appendChild(name);\n\n  const date = document.createElement('h6');\n  date.innerHTML = review.date;\n  li.appendChild(date);\n\n  const rating = document.createElement('h5');\n  rating.innerHTML = `Rating: ${review.rating}`;\n  li.appendChild(rating);\n\n  const comments = document.createElement('p');\n  comments.innerHTML = review.comments;\n  li.appendChild(comments);\n\n  return li;\n};\n\n/**\n * Add restaurant name to the breadcrumb navigation menu\n */\nconst fillBreadcrumb = (data = restaurant) => {\n  const breadcrumb = document.getElementById('breadcrumb');\n  const li = document.createElement('li');\n  li.innerHTML = data.name;\n  breadcrumb.appendChild(li);\n};\n\n/**\n * Get a parameter by name from page URL.\n */\nconst getParameterByName = (name, url) => {\n  if (!url) url = window.location.href;\n  name = name.replace(/[\\[\\]]/g, '\\\\$&');\n  const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\n    results = regex.exec(url);\n  if (!results) return null;\n  if (!results[2]) return '';\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n};\n"]}