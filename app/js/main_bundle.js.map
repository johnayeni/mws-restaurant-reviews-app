{"version":3,"sources":["app.js","dbhelper.js","main.js"],"names":["navigator","window","addEventListener","_asyncToGenerator2","default","_regenerator","mark","_callee","registration","wrap","_context","prev","next","serviceWorker","register","sent","console","log","scope","t0","stop","this","_idb","_interopRequireDefault","require","DBHelper","callback","fetch","DATABASE_URL","response","status","json","restaurants","id","concat","restaurant","_context2","cuisine","fetchRestaurants","error","results","filter","r","cuisine_type","neighborhood","neighborhoods","map","v","i","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","photograph","google","maps","Marker","position","latlng","title","name","url","urlForRestaurant","animation","Animation","DROP","observer","_dbhelper","markers","numSteps","document","event","setIntersectObservers","setEventListeners","fetchNeighborhoods","fetchCuisines","getElementById","updateRestaurants","options","root","querySelector","rootMargin","threshold","buildThresholdList","IntersectionObserver","handleIntersect","thresholds","ratio","push","entries","forEach","entry","intersectionRatio","target","classList","remove","add","data","fillNeighborhoodsHTML","arguments","length","undefined","select","option","createElement","innerHTML","value","setAttribute","append","fillCuisinesHTML","initMap","Map","zoom","center","lat","lng","scrollwheel","cSelect","nSelect","cIndex","selectedIndex","nIndex","fetchRestaurantByCuisineAndNeighborhood","resetRestaurants","fillRestaurantsHTML","m","setMap","ul","createRestaurantHTML","addMarkersToMap","li","className","image","src","imageUrlForRestaurant","alt","tabIndex","address","more","href","observe","marker","mapMarkerForRestaurant","addListener","location"],"mappings":"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","file":"main_bundle.js","sourcesContent":["if ('serviceWorker' in navigator) {\n  window.addEventListener('load', async () => {\n    try {\n      const registration = await navigator.serviceWorker.register('sw.js');\n      console.log('ServiceWorker registration successful with scope: ', registration.scope);\n    } catch (error) {\n      console.log('ServiceWorker registration failed: ', error);\n    }\n  });\n}\n","import idb from 'idb';\r\n/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelper {\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 1337; // Change this to your server port\r\n    return `http://localhost:${port}/restaurants`;\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  static async fetchRestaurants(callback) {\r\n    try {\r\n      const response = await fetch(DBHelper.DATABASE_URL);\r\n      if (response.status === 200) {\r\n        // Got a success response from server!\r\n        const restaurants = await response.json();\r\n        callback(null, restaurants);\r\n      } else {\r\n        callback('Could not fetch restaurants', null);\r\n      }\r\n    } catch (error) {\r\n      callback(error, null);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static async fetchRestaurantById(id, callback) {\r\n    try {\r\n      const response = await fetch(`${DBHelper.DATABASE_URL}/${id}`);\r\n      if (response.status === 200) {\r\n        // Got a success response from server!\r\n        const restaurant = await response.json();\r\n        callback(null, restaurant);\r\n      } else {\r\n        callback('Restaurant does not exist', null);\r\n      }\r\n    } catch (error) {\r\n      callback(error, null);\r\n    }\r\n  }\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter((r) => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter((r) => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants;\r\n        if (cuisine != 'all') {\r\n          // filter by cuisine\r\n          results = results.filter((r) => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') {\r\n          // filter by neighborhood\r\n          results = results.filter((r) => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood);\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i);\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type);\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i);\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return `./restaurant.html?id=${restaurant.id}`;\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n    return `/img/${restaurant.photograph}.jpg`;\r\n  }\r\n\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n  static mapMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP,\r\n    });\r\n    return marker;\r\n  }\r\n}\r\n\r\nexport default DBHelper;\r\n","import DBHelper from './dbhelper';\r\n\r\nlet restaurants, neighborhoods, cuisines;\r\nlet map;\r\nlet markers = [];\r\nlet observer;\r\nconst numSteps = 20.0;\r\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', (event) => {\r\n  setIntersectObservers();\r\n  setEventListeners();\r\n  fetchNeighborhoods();\r\n  fetchCuisines();\r\n});\r\n\r\n/**\r\n * Set event listeners for filter changing\r\n */\r\nconst setEventListeners = () => {\r\n  const neighborHoodSelect = document.getElementById('neighborhoods-select');\r\n  neighborHoodSelect.addEventListener('change', function() {\r\n    updateRestaurants();\r\n  });\r\n\r\n  const cuisineSelect = document.getElementById('cuisines-select');\r\n  cuisineSelect.addEventListener('change', function() {\r\n    updateRestaurants();\r\n  });\r\n};\r\n\r\nconst setIntersectObservers = () => {\r\n  const options = {\r\n    root: document.querySelector('#scrollArea'),\r\n    rootMargin: '0px',\r\n    threshold: buildThresholdList(),\r\n  };\r\n\r\n  observer = new IntersectionObserver(handleIntersect, options);\r\n};\r\n\r\nconst buildThresholdList = () => {\r\n  const thresholds = [];\r\n\r\n  for (let i = 1.0; i <= numSteps; i++) {\r\n    const ratio = i / numSteps;\r\n    thresholds.push(ratio);\r\n  }\r\n\r\n  thresholds.push(0);\r\n  return thresholds;\r\n};\r\n\r\nconst handleIntersect = (entries, observer) => {\r\n  entries.forEach((entry) => {\r\n    if (entry.intersectionRatio > 0.25) {\r\n      entry.target.classList.remove('hidden');\r\n      entry.target.classList.add('show');\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\r\nconst fetchNeighborhoods = () => {\r\n  DBHelper.fetchNeighborhoods((error, data) => {\r\n    if (error != null) {\r\n      // Got an error\r\n      console.error(error);\r\n    } else {\r\n      neighborhoods = data;\r\n      fillNeighborhoodsHTML();\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nconst fillNeighborhoodsHTML = (data = neighborhoods) => {\r\n  const select = document.getElementById('neighborhoods-select');\r\n\r\n  data.forEach((neighborhood, i) => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = neighborhood;\r\n    option.value = neighborhood;\r\n    option.setAttribute('role', 'option');\r\n    option.setAttribute('aria-posinset', i + 1);\r\n    option.setAttribute('aria-setsize', data.length);\r\n    select.append(option);\r\n  });\r\n};\r\n\r\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\r\nconst fetchCuisines = () => {\r\n  DBHelper.fetchCuisines((error, data) => {\r\n    if (error) {\r\n      // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      cuisines = data;\r\n      fillCuisinesHTML();\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Set cuisines HTML.\r\n */\r\nconst fillCuisinesHTML = (data = cuisines) => {\r\n  const select = document.getElementById('cuisines-select');\r\n\r\n  data.forEach((cuisine, i) => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = cuisine;\r\n    option.value = cuisine;\r\n    option.setAttribute('role', 'option');\r\n    option.setAttribute('aria-posinset', i + 1);\r\n    option.setAttribute('aria-setsize', cuisines.length);\r\n    select.append(option);\r\n  });\r\n};\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\nwindow.initMap = () => {\r\n  let loc = {\r\n    lat: 40.722216,\r\n    lng: -73.987501,\r\n  };\r\n  map = new google.maps.Map(document.getElementById('map'), {\r\n    zoom: 12,\r\n    center: loc,\r\n    scrollwheel: false,\r\n  });\r\n  updateRestaurants();\r\n};\r\n\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nconst updateRestaurants = () => {\r\n  const cSelect = document.getElementById('cuisines-select');\r\n  const nSelect = document.getElementById('neighborhoods-select');\r\n\r\n  const cIndex = cSelect.selectedIndex;\r\n  const nIndex = nSelect.selectedIndex;\r\n\r\n  const cuisine = cSelect[cIndex].value;\r\n  const neighborhood = nSelect[nIndex].value;\r\n  console.log('change');\r\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\r\n    if (error) {\r\n      // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      resetRestaurants(restaurants);\r\n      fillRestaurantsHTML();\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\nconst resetRestaurants = (data) => {\r\n  // Remove all restaurants\r\n  restaurants = [];\r\n  const ul = document.getElementById('restaurants-list');\r\n  ul.innerHTML = '';\r\n\r\n  // Remove all map markers\r\n  markers.forEach((m) => m.setMap(null));\r\n  markers = [];\r\n  restaurants = data;\r\n};\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nconst fillRestaurantsHTML = (data = restaurants) => {\r\n  const ul = document.getElementById('restaurants-list');\r\n  data.forEach((restaurant) => {\r\n    ul.append(createRestaurantHTML(restaurant));\r\n  });\r\n  addMarkersToMap();\r\n};\r\n\r\n/**\r\n * Create restaurant HTML.\r\n */\r\nconst createRestaurantHTML = (restaurant) => {\r\n  const li = document.createElement('li');\r\n  li.className = 'post';\r\n  li.setAttribute('role', 'listitem');\r\n\r\n  const image = document.createElement('img');\r\n  image.className = 'restaurant-img';\r\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\r\n  image.alt = restaurant.name + \" restaurant's photo.\";\r\n  li.append(image);\r\n\r\n  const name = document.createElement('h2');\r\n  name.innerHTML = restaurant.name;\r\n  name.tabIndex = 0;\r\n  name.setAttribute('aria-label', `${restaurant.name} , ${restaurant.neighborhood}`);\r\n  li.append(name);\r\n\r\n  const neighborhood = document.createElement('p');\r\n  neighborhood.innerHTML = restaurant.neighborhood;\r\n  li.append(neighborhood);\r\n\r\n  const address = document.createElement('p');\r\n  address.innerHTML = restaurant.address;\r\n  li.append(address);\r\n\r\n  const more = document.createElement('a');\r\n  more.innerHTML = 'View Details';\r\n  more.href = DBHelper.urlForRestaurant(restaurant);\r\n  more.setAttribute('aria-label', `View details of ${restaurant.name}'s restaurant`);\r\n  li.append(more);\r\n  li.classList.add('hidden');\r\n\r\n  observer.observe(li);\r\n  return li;\r\n};\r\n\r\n/**\r\n * Add markers for current restaurants to the map.\r\n */\r\nconst addMarkersToMap = (data = restaurants) => {\r\n  data.forEach((restaurant) => {\r\n    // Add marker to the map\r\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, map);\r\n    google.maps.event.addListener(marker, 'click', () => {\r\n      window.location.href = marker.url;\r\n    });\r\n    markers.push(marker);\r\n  });\r\n};\r\n"]}